#!/bin/bash

exit_err()
{
        echo "Use $0 -h or $0 --help" >&2
        exit 1
}

users()
{
        if [ $# -eq 0 ]
        then
                cat /etc/passwd | cut -d: -f1,6 | sort
        else
                exit_err
        fi
}

processes()
{
        if [ $# -eq 0 ]
        then
                ps aux
        else
                exit_err
        fi
}

help()
{
        echo "-u и --users выводит перечень пользователей и их домашних директорий на экран, отсортированных по алфавиту" >&1
        echo "-p и --processes выводит перечень запущенных процессов, отсортированных по их идентификатору" >&1
        echo "-h и --help выводит справку с перечнем и описанием аргументов и останавливает работу" >&1
        echo "-l PATH и --log PATH замещает вывод на экран выводом в файл по заданному пути PATH" >&1
        echo "-e PATH и --errors PATH замещает вывод ошибок из потока stderr в файл по заданному пути PATH" >&1
        exit 0
}

log()
{
        if [ $# -eq 0 ] || [ $# -gt 1 ]
        then
                echo "Usage: -l PATH or --log PATH" >&2
                exit_err
        fi
        echo "Log path is $1 now" >&1
        exec 1>$1
}

errors()
{
        if [ $# -eq 0 ] || [ $# -gt 1 ]
        then
                echo "Usage: -e PATH or --errors PATH" >&2
                exit_err
        fi
        echo "Error path is $1 now"
        exec 2>$1
}

# main
valid_args=$(getopt -o uphl:e: --long users,processes,help,log:,errors: -- "$@")
if [[ $? -ne 0 ]]
then
        exit_err
fi

eval set -- "$valid_args"
while [ : ];
do
case "$1" in
-u | --users)
        users
        shift
        ;;
-p | --processes)
        processes
        shift
        ;;
-h | --help)
        help
        shift
        ;;
-l | --log)
        log $2
        shift 2
        ;;
-e | --errors)
        errors $2
        shift 2
        ;;
--)
        shift;
        break
        ;;
esac
done
